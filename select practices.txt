/* 010 
  確定打開的是 Northwind 資料庫 */
use Northwind
go

/* 110 
  請寫一道指令, 列出:
  products 資料表的所有產品資料
 */ 
 select * from products


/* 120 
  請寫一道指令. 列出:
  products 資料表的所有產品, 條列資料時, 請列出以下欄位:
  ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
 */ 
 select ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel

 from products


/* 130 
  請寫一道指令, 列出:
  products 資料表 "庫存量低於再訂購量" 的產品資料, 條列資料時, 
  請列出以下欄位:
  ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
 */ 
 use Northwind
 select ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
 from Products
 where UnitsInStock < UnitsOnOrder

/* 140 
  請寫一道指令, 列出:
  products 資料表 (庫存量 + 訂購中數量) 低於再訂購量的產品資料, 條列資料時, 
  請列出以下欄位:
  ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
 */ 
 use Northwind
 select ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
 from Products
 where (UnitsInStock + UnitsOnOrder) <  ReorderLevel




/* 150 
  請寫一道指令, 列出:
  products 資料表 "庫存量低於再訂購量" 的產品資料, 條列資料時, 
  請列出以下欄位
  SupplierID, ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel

  並且, 相同供應商代號(SupplierID)的產品請排在一起
 */ 

 select ProductID, ProductName, UnitPrice, UnitsInStock, UnitsOnOrder, ReorderLevel
 from Products
 where UnitsInStock  <  ReorderLevel
 order by SupplierID desc



/* 160 
  請寫一道 指令 列出:
  products table 產品名稱以 C 開頭的資料
 */ 
 select*
 from products
 where productName like 'c%'



/* 170 
  請寫一道指令, 列出:
  products 資料表之類別編號(CategoryID)為 1, 4, 8 的產品資料
  排序時, 請按"類別編號"排序, 相同類別編號的產品按產品名稱(ProductName)排列
 */ 

 select *
 from products
 where CategoryID IN (1,4,8)
 order by ProductName




/* 180 
  請寫一道指令, 列出:
  products 資料表之單價介於 10 到 20 元之間(包含 10, 20)的產品資料
  並且按照單價(UnitPrice)由大到小排序
 */ 
 select *
 from products
 where UnitPrice Between 10 and 20
 order by UnitPrice desc

 select *
 from products
 where (UnitPrice >= 10 and <= 20) or CategoryID = 1
 order by UnitPrice desc

 ----price mean between 10 and 20 or categoryID

 select *
 from products
 where UnitPrice >= 10 or CategoryID = 1 and <= 20 
 order by UnitPrice desc

 ---mean uniprice >=10, (categoryid=1 and <=20) doesn not work
 


/* 190 
  請寫一道指令, 列出:
  products 資料表之所有產品, 條列資料時, 
  請列出以下欄位
  ProductID, ProductName, UnitPrice, 

  不過, 各欄位名稱請用中文顯示:
  產品編號, 產品名稱, 單價
 */ 

 select ProductID as 產品編號, ProductName as 產品名稱, UnitPrice as 單價,
 from Products

 select ProductID as 產品編號, ProductName as 產品名稱, UnitPrice as 單價, 
  (UnitPrice * UnitsInStock) as StockCost
  from products

  
  Distinct same recorde , save one 
  
  select SupplierID
  from Suppliers

  select SupplierID,Country
  from Suppliers

  select distinct SupplierID, Country
  from Suppliers

  select distinct Country
  from Suppliers



  select ProductID, ProductName, UnitPrice, 
  (UnitPrice * UnitsInStock) as StockCost
  from products

  select ProductID, ProductName, UnitPrice, 
  (UnitPrice * UnitsInStock) as StockCost
  from products
  where  (UnitPrice * UnitsInStock)>1000

  盡量以原始(UnitPrice * UnitsInStock),不使用StockCost

  ---int---整數
  ---varchar(20)
  ---int,decimal(5,2)123.45  money
  create table text 22
  (
   id int primary key,
   data varchar(10)
  )
  insert into text22 (id, data) values(1,'1234567890')

  select * from text22
  insert into text22(id,data) values(2,'12345678901')
  select id,data,convert(varchar(2),id())




use Northwind
go

select * from Products

select CategoryID, ProductID, ProductName, UnitPrice
from Products
order by UnitPrice 

select CategoryID, ProductID, ProductName, UnitPrice,
rank() over (order by UnitPrice) as OrderNo
from Products
order by UnitPrice 


select CategoryID, ProductID, ProductName, UnitPrice,
dense_rank() over (order by UnitPrice) as OrderNo
from Products
order by UnitPrice 

select CategoryID, ProductID, ProductName, UnitPrice,
rank() over (partition by CategoryID  order by UnitPrice) as OrderNo
from Products
order by CategoryID, UnitPrice 

select CategoryID, ProductID, ProductName, UnitPrice,
row_number() over (order by UnitPrice) as OrderNo
from Products
order by UnitPrice 


select CategoryID, ProductID, ProductName, UnitPrice,
ntile(5) over (order by UnitPrice) as OrderNo
from Products
order by UnitPrice

-- 210 請列出單價最高的前三項產品。
select top 3 * 
from products
order by UnitPrice desc




-- 220 請列出產品的平均單價。
select avg(UnitPrice)
from Products

-----庫存量
select sum(UnitsInStock * UnitPrice)
from Products


-- 230 請以類別編號(CategoryID)等於 1, 4, 8 為計算範圍, 計算產品的平均單價。

select avg(UnitPrice)
from products
where CategoryID IN (1,4,8)



-- 240 請列出各類產品的平均單價。
select CategoryID,
avg(UnitPrice)
from products
group by CategoryID



-- 250 請列出平均單價最高的前三類產品。

select CategoryID, Avg(UnitPrice) as AveragePrice from products
group by CategoryID
order by AveragePrice desc

select top 3 CategoryID, Avg(UnitPrice) as AveragePrice from products
group by CategoryID
order by AveragePrice desc


---- avg price over 30

select CategoryID,
avg(UnitPrice)
from products
group by CategoryID
having avg(UnitPrice)>30


select CategoryID,
avg(UnitPrice)
from products
group by CategoryID
having UnitsInStock >100

---doesn't work because "having" is doing CategoryID,UnitPrice. it dosen't have UnitsInStock
----having 一種過濾,在統計過後, group by 是一組

use northwind 
go

select *
from[Order Details]
------明細

select OrderID,sum(quantity)
 from[Order Details]
 group by OrderID
 -----摘要

 select OrderID,ProductID,sum(quantity)
 from[Order Details]
 group by OrderID,ProductID with rollup
 ----明細加摘要----with roll up 






/* 310
  請寫一道指令, 列出 products 資料表的以下欄位
  ProductID, ProductName, SupplierID
 */ 

 select ProductID, ProductName, SupplierID
 from Products
 ---------------供應商資料
 select *
 from Suppliers

 select * 
 from Products as P join Suppliers as S
 on S.SupplierID = P.ProductID
 ----巢式狀迴圈
 ---on = ---->做資料篩選
 ---以join註明另一個資料表
 ---再以on指定結合條件
 ---通常利用主建與外建欄位指定on條件
 ---select x.欄位,y欄位
 ---from x join y on y.fk = x.pk

/* 320
   同上, 但請一併列出該供應商名稱(CompanyName)、
   聯絡電話(Phone)、聯絡人(ContactName)好嗎?
   另外, 相同供應商的資料請列在一起
 */ 
 
 select ProductID, ProductName as PN, p.SupplierID, CompanyName, Phone, ContactName
 from Products p join Suppliers s
 on p.SupplierID = s.SupplierID 
 order by p.SupplierID



 select ProductID, ProductName as PN, p.SupplierID, CompanyName, Phone, ContactName 
  from products p join suppliers s
  on p.SupplierID = s.SupplierID
  order by p.SupplierID


  ----各客戶買過什麼商品
  select * from Customers
  select * from Orders
  select * from [Order Details]
  select * from Products

  select c.CustomerID, companyName, p.ProductID,  ProductName 
  from Customers as c 
  join Orders as o on o.CustomerID = c.CustomerID
  join [Order Details] as od on od.OrderID = o.OrderID
  join Products p on p.ProductID = od.ProductID
  order by c.CustomerID,p.ProductID

  select c.CustomerID, CompanyName, p.ProductID, ProductName
  from Customers as c 
    join Orders o on o.CustomerID = c.CustomerID
	join [Order Details] od on od.OrderID = o.OrderID
	join Products p on p.ProductID = od.ProductID
order by c.CustomerID, p.ProductID

============= 

select distinct
  c.CustomerID, CompanyName, p.ProductID, ProductName
  from Customers as c 
    join Orders o on o.CustomerID = c.CustomerID
	join [Order Details] od on od.OrderID = o.OrderID
	join Products p on p.ProductID = od.ProductID
order by c.CustomerID, p.ProductID

----inner join 找不到的資料不必列出
----lift join 
----right join
---outer join
--- cross join 不必寫on,做交叉比對排列組合
select 
from
cross join
order 
--- self join


/* 330
   我想列出「所有」供應商目前各自提供我們哪些產品資料的對照表,
   目前沒提供我們產品的供應商也要列出
   
    
   <note>
   下指令前, 請先執行下列指令:
   -- begin --
   insert into suppliers
     (CompanyName, ContactName, Phone)
      values
     ('Taiwan First', 'A-Ban', '(001) 000-0001')
   -- end --
 */ 

 

 select s.SupplierID, CompanyName, ProductID, ProductName 
  from suppliers s left join products p
  on s.SupplierID = p.SupplierID
  order by s.SupplierID
 



-- (Optional)
-- 340 請列出員工及其員工直屬老闆（ReportsTo）的清單。

select * from Employees

select EmployeeID, (FirstName + ' ' + LastName) as EmployeeName, ReportsTo
  from Employees

select EmployeeID, (FirstName + ' ' + LastName) as EmployeeName, ReportsTo
  into #BossList
  from Employees

select E.EmployeeID, (E.FirstName + ' ' + E.LastName) as EmployeeName, 
  E.ReportsTo, EmployeeName as BossName
  from Employees as E join #BossList B
  on E.ReportsTo = B.EmployeeID

select E.EmployeeID, (E.FirstName + ' ' + E.LastName) as EmployeeName, 
  E.ReportsTo, EmployeeName as BossName
  from Employees as E Left join #BossList B
  on E.ReportsTo = B.EmployeeID

select E.EmployeeID, (E.FirstName + ' ' + E.LastName) as EmployeeName, 
  E.ReportsTo, (B.FirstName + ' ' + B.LastName) as BossName
  from Employees as E Left join Employees as B
  on E.ReportsTo = B.EmployeeID

=============================
use Northwind
go

select * from Orders

select * from Orders
  order by OrderDate DESC

select top 20 * from Orders
  order by OrderDate DESC

-- error:
select last 20 * from Orders
  order by OrderDate ASC


select * from 
	(
		select top 20 * from Orders
		  order by OrderDate DESC
	) as X
order by OrderDate ASC
 
 
  ---子查詢(subquery)
  --在一個查詢指令中,內嵌另一個查詢指令
  --內嵌的子查詢必須前後已刮號框住
  --將複雜的查詢分解成數個小查詢步驟
  --以某個查詢結果為基礎
  ---必須加上"資料別名"----> as
  --- 凡是允許運算式的地方,都可以利用括號內嵌"子查詢"


  --起
  select * from Products 
  --承
  select CategoryID, ProductID, ProductName, UnitPrice 
  from Products

  select CategoryID, ProductID, ProductName, UnitPrice 
  from Products
  --轉
  select avg(unitprice) 
  from Products
  --合
  select CategoryID, ProductID, ProductName, UnitPrice 
   ,(select avg(unitprice) from Products) as avgPrice
  from Products

select CategoryID, ProductID, ProductName, UnitPrice
  , (select avg(UnitPrice) from Products) as AvgPrice
  , UnitPrice - (select avg(UnitPrice) from Products) as DiffPrice
  from Products

  ==============================

  --起
  select * from Products 
  --承
  select CategoryID, ProductID, ProductName, UnitPrice 
  from Products

  select CategoryID, ProductID, ProductName, UnitPrice 
  from Products
  --轉
  select avg(unitprice) 
  from Products where CategoryID = 1

select avg(UnitPrice) from Products where CategoryID = 1
select avg(UnitPrice) from Products where CategoryID = 2
  --合 ,p等於當時類別編號
  select CategoryID, ProductID, ProductName, UnitPrice 
   ,(select avg(unitprice) from Products where CategoryID = p.categoryID) as avgPrice
  from Products p 

select CategoryID, ProductID, ProductName, UnitPrice
  , (select avg(UnitPrice) from Products where CategoryID = 1) as AvgPrice
  from Products


select CategoryID, ProductID, ProductName, UnitPrice
  , (select avg(UnitPrice) from Products where CategoryID = p.CategoryID) as AvgPrice
  from Products p

select CategoryID, ProductID, ProductName, UnitPrice
  , (select avg(UnitPrice) from Products where CategoryID = p.CategoryID) as AvgPrice
  , UnitPrice - (select avg(UnitPrice) from Products where CategoryID = p.CategoryID) as DiffPrice
  from Products p

  =======================

  select CategoryID, Avg(UnitPrice) as AvgPrice 
  from Products 
  group by CategoryID


select p.CategoryID, ProductID, ProductName, UnitPrice, AvgPrice,
  UnitPrice - AvgPrice as DiffPrice
  from Products as p join 
  (
	select CategoryID, Avg(UnitPrice) as AvgPrice 
	  from Products 
	  group by CategoryID
  ) AS G on G.CategoryID = p.CategoryID
order by ProductID


  
  ===================================

  use Northwind
go

-- 起
select * from Orders

-- 承
select OrderID, CustomerID, OrderDate
  from Orders
  where ...?

-- 轉
select * from [Order Details]
  where ProductID = 23 and Quantity > 20


-- 合
select OrderID, CustomerID, OrderDate
  from Orders
  where OrderID in (10337, 10348, 10396, ...)

-- error:
select OrderID, CustomerID, OrderDate
  from Orders
  where OrderID in (
	select * from [Order Details]
		where ProductID = 23 and Quantity > 20  
  )


select OrderID, CustomerID, OrderDate
  from Orders
  where OrderID in (
	select OrderID from [Order Details]
		where ProductID = 23 and Quantity > 20  
  )
  
  


/* 410
  請列出各項產品的類別、編號、品名、單價、
  該類產品平均單價、單價與產品平均單價的「價差」。
*/

select CategoryID,ProductID,ProductName,UnitPrice
from Products

select avg(UnitPrice)
from products
where CategoryID = 1

select CategoryID, ProductID, ProductName, UnitPrice, 37.9791 as UnitPrice 
  from products

select CategoryID, ProductID, ProductName, UnitPrice, 
  37.9791 as UnitPrice 
  from products as o

select CategoryID, ProductID, ProductName, UnitPrice, 
  (select Avg(UnitPrice) from products as i where CategoryID = o.CategoryID) as AvgPrice
  from products as o

select CategoryID, ProductID, ProductName, UnitPrice, 
  (select Avg(UnitPrice) from products as i where CategoryID = o.CategoryID) as AvgPrice,
  UnitPrice - (select Avg(UnitPrice) from products as i where CategoryID = o.CategoryID) as DiffPrice
  from products as o
  order by CategoryID, ProductID


----請美商供應商的產品清單

---起

select *
from Products

---承

select *
from Suppliers
where Country = 'USA'


---轉

select * from Suppliers where Country = 'USA'
select SupplierID from Suppliers where Country = 'USA'


---合

select * from Products
  where SupplierID in (select SupplierID from Suppliers where Country = 'USA')


----other way
select P.* ,S.Country from Products as P join Suppliers as S
on p.SupplierID = s.SupplierID
where Country = 'USA'



/* 420
   請列出有訂第三類產品的訂單。
*/

select * from orders

select * from [order details]

select * from Products

select OrderID, ProductID from [order details]
  where ProductID in (select ProductID from Products where CategoryID = 3)

select OrderID from [order details]
  where ProductID in (select ProductID from Products where CategoryID = 3)

select * from orders
  where OrderID in 
    (select OrderID from [order details]
      where ProductID in (select ProductID from Products where CategoryID = 3))




/* 430
  請列出賣得最好前三項產品。
*/


select * from products

select * from [order details] 

select ProductID, Sum(Quantity) as SumQty from [order details]
  Group by ProductID
  order by Sum(Quantity) desc

select top 3 ProductID from [order details]
  Group by ProductID
  order by Sum(Quantity) desc

select ProductID, ProductName from products
  where productID in 
   (
     select top 3 ProductID from [order details]
       Group by ProductID
       order by Sum(Quantity) desc
   )





